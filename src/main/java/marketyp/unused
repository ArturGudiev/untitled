//    private boolean containsInPathes(final int point) {
//        return pathes.stream().map(p -> indexOfAll(point, p).size() != 0)
//                .reduce(false, (a, b) -> a || b);
//    }

    private Object[] getDistFromPathesToPoint(List<List<Integer>> pathes, int point) {
        int index = -1;
        double res = Double.POSITIVE_INFINITY;
        for (int i = 0; i < pathes.size(); i++) {
            double distFromPathToPoint = getDistFromPathToPoint(pathes.get(i), point);
            if (distFromPathToPoint < res) {
                res = distFromPathToPoint;
                index = i;
            }
        }
        return new Object[]{res, index};
    }

    //    private Object[] getDistAfterAddingStock(int stock) {
    //        ArrayList<Integer> newPath = getNewEverydayPath();
    //        Object[] resFromExisting = getDistFromPathesToPoint(pathes, stock);
    //        double distForNewPath = getDistFromPathToPoint(newPath, stock);
    //        double distForExistPathes = (double) resFromExisting[0];
    //        int indexForExistPathes = (int) resFromExisting[1];
    //        int indexOfPathWithStock = -1;
    //        double dist = min(distForExistPathes, distForNewPath);
    //        if (distForNewPath < distForExistPathes) {
    ////            addPointToPath(newPath, stock);
    //            pathes.add(newPath);
    //            indexOfPathWithStock = pathes.size() - 1;
    //        } else {
    ////            addPointToPath(pathes.get(indexForExistPathes), stock);
    //            indexOfPathWithStock = indexForExistPathes;
    //        }
    //        return new Object[]{dist, indexOfPathWithStock};
    //    }


//    List<List<Integer>> pathes = new ArrayList<List<Integer>>();

//    public ArrayList<Integer> getNewEverydayPath() {
//        return (ArrayList) path.clone();
//    }

    static ArrayList<Integer> indexOfAll(Object obj, List list) {
        ArrayList<Integer> indexList = new ArrayList<Integer>();
        for (int i = 0; i < list.size(); i++)
            if (obj.equals(list.get(i)))
                indexList.add(i);
        return indexList;
    }

//
//    private void addHome(int indexOfPathWithStock, int stock, int home) {
//        int distOther;
//        int distWithStock;
//        ArrayList<Integer> newPath = getNewEverydayPath();
//        double distFromNewPath = getDistFromPathToPoint(newPath, home);
//        List<List<Integer>> otherPathes = pathes.subList(indexOfPathWithStock + 1, pathes.size());
//        Object[] resFromOtherPathes = getDistFromPathesToPoint(otherPathes, home);
//        double distFromOtherPathes = (double) resFromOtherPathes[0];
//        int indexForExistingPath = (int) resFromOtherPathes[1];
//        List<Integer> stockPath = pathes.get(indexOfPathWithStock);
//        int stockIndexInPath = stockPath.indexOf(stock);
//        double distFromStockPath = getDistFromPathToPoint(stockPath.subList(stockIndexInPath, stockPath.size()), home);
//        if(distFromNewPath < distFromOtherPathes && distFromNewPath < distFromStockPath){
//            //addToNewpath
//            addPointToPath(newPath, stock);
//            pathes.add(newPath);
//        }else if (distFromOtherPathes < distFromNewPath && distFromOtherPathes < distFromStockPath){
//            //addToOtherPathes
//            addPointToPath(pathes.get(indexForExistingPath), home);
//        }else{
//            List<Integer> subPathFromStock = stockPath.subList(stockIndexInPath, stockPath.size());
//            addPointToPath(subPathFromStock, home);
//            List<Integer> newStockPath = stockPath.subList(0, stockIndexInPath);
//            newStockPath.addAll(subPathFromStock);
//            pathes.set(pathes.indexOf(stockPath), newStockPath);
//        }
//    }



//        addBehaviour(new CyclicBehaviour(this) {
//
//            @Override
//            public void action() {
//                System.out.println("GETTING MESSAGES");
//                ACLMessage msg = myAgent.receive();
//                if (msg != null) {
//                    System.out.println(myAgent.getLocalName() + ": " + ACLMessage.getPerformative(msg.getPerformative()) + " from " + msg.getSender().getLocalName());
//                    System.out.println(msg.getContent());
//                }else{
//                    block();
//                }
//            }
//        });

//                else if (msg != null && waitForConfirm
//                        && msg.getPerformative() == ACLMessage.CONFIRM
//                        && msg.getSender().getLocalName().equals(consumerAgent)) {
//
//                    addPointToPath(consumerHome);
//                    consumers.add(consumerAgent);
//                    Env.addOrder(getLocalName(), consumerAgent);
//
//                    coef *= 3;
//                    printMessage(msg);
//                }
//        addBehaviour(new TickerBehaviour(this, timeout) {
//            @Override
//            protected void onTick() {
//                if(needToBuy ) {
//                    tryToBuy();
//                }
//            }
//        });


    public boolean checkForAcceptMessage(ACLMessage msg) {
        if (msg == null) {
            return false;
        }
        if (this.needToBuy && this.waitForAccept && msg.getPerformative() == ACLMessage.ACCEPT_PROPOSAL) {
            printMessage(msg);
            LOGGER.log(Level.INFO, this.getLocalName() + ": get ACCEPT from " + msg.getSender().getLocalName());
            this.needToBuy = false;
            ACLMessage confirmMessage = getResponseMessage(msg, ACLMessage.CONFIRM);
            printSentMessage(msg.getSender().getLocalName(), confirmMessage);
            this.send(confirmMessage);
            Env.INSTANCE.decreaseBuyers();
            return true;
        }
        return false;
    }

        //get messages and answer
//        addBehaviour(new CyclicBehaviour(this) {
//
//            @Override
//            public void action() {
//                ACLMessage msg = myAgent.receive();
//                if (msg != null) {
//                    // get ACCEPT
//                    checkForAcceptMessage(msg);
//                }
//            }
//
//        });

//    private void tryToBuy() {
//        try {
//            waitForAccept = true;
//            System.out.println(this.getLocalName() + ": SENT message PROPOSE " +  home + " " +  offerPrice);
//            for(DFAgentDescription dfd : services){
//                sendOfferToDefiniteService(dfd);
//            }
//            addBehaviour(new WakerBehaviour(this, timeout) {
//                @Override
//                protected void onWake() {
//                    ACLMessage msg = myAgent.receive();
//                    if (msg != null) {
//                        if (msg.getPerformative() == ACLMessage.ACCEPT_PROPOSAL) {
//                            printMessage(myAgent, msg);
//                            LOGGER.log(Level.INFO, getLocalName() + ": get ACCEPT from " + msg.getSender().getLocalName());
//                            needToBuy = false;
//                            ACLMessage acceptMessage = getResponseMessage(msg, ACLMessage.CONFIRM);
//                            printSentMessage(myAgent, msg.getSender().getLocalName(), acceptMessage);
//                            myAgent.send(acceptMessage);
//                            Env.INSTANCE.decreaseBuyers();
//                        }
//                    }
//                    waitForAccept = false;
//                    offerPrice +=  needToBuy ? 50 : 0;
//                }
//            });
//        }catch (Exception e){e.printStackTrace();}
//    }

